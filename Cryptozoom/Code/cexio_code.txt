[Site] https://github.com/beli-sk/cex.io-api-python/blob/master/cexapi/test.py

# -*- coding: utf-8 -*-
import cexapi

demo = cexapi.api(username, api_key, api_secret)
print "Ticker (GHS/BTC)"
print demo.ticker() ## or demo.ticker('GHS/BTC')
print "Ticker (BF1/BTC)"
print demo.ticker('BF1/BTC')
print "Order book (GHS/BTC)"
print demo.order_book() ## or demo.order_book('GHS/BTC')
print "Order book (BF1/BTC)"
print demo.order_book('BF1/BTC')
print "Trade history since=100 (GHS/BTC)"
print demo.trade_history(100) ## or (100,'GHS/BTC')
print "Trade history since=100 (BF1/BTC)"
print demo.trade_history(100,'BF1/BTC')
print "Balance"
print demo.balance()
print "Open orders (GHS/BTC)"
print demo.current_orders() ## or ('GHS/BTC')
print "Open orders (BF1/BTC)"
print demo.current_orders('BF1/BTC')
print "Cancel order (order_id=100)"
print demo.cancel_order(100)
print "Plaсe order buy 4GHS/0.1BTC)"
print demo.place_order('buy',1,0.1) ## or ('buy',1,0.1,'GHS/BTC')
print "Open orders sell 1BF1/1.5BTC"
print demo.place_order('sell',1,1.5,'BF1/BTC')

##############################################################################################################
## CEX API ##   https://github.com/matveyco/cex.io-api-python

class API(object):
        __cexuser = ''
        __cexkey = ''
        __cexsecret = ''
        __nonce_v = ''

#------------Init Class------------------#
def __init__(self, username, api_key, api_secret):
        self.__cexuser = username
        self.__cexkey = api_key
        self.__cexsecret = api_secret


#------------Get Timestamp as Nonce----------------------#
def __nonce(self):
        self.__nonce_v = '{:.10f}'.format(time.time()*1000).split('.')[0]

#------------Generate Signature----------------------#
def __signature(self):
        #Create the String
        string = self.__nonce_v + self.__username + self.__api_key 
        #Create the Signature
        signature = hmac.new(self.__api_secret.encode('ascii'), string.encode('ascii'), digestmod=hashlib.sha256).>
        return signature
#------------Low Level API Post Request----------------------#
def __post(self, url, parm):
        params = urllib.parse.urlencode(param).encode('utf-8')
        req = urllib.request.Request(url, params, {'User-agent': 'LeMarchand', "Content-Type": "application/x-www->
        page = urllib.request.urlopen(req).read().decode('utf-8')
        return page
#------------Mid Level API Call----------------------#
def api_call(self, method, param = {}, private = 0, couple = '', trailing_slash = 1):
        if trailing_slash == 1:
                # Generate URL
                url = 'https://cex.io/api/'+method+'/'
        else:
                # Generate URL 
                url = 'https://cex.io/api/'
        
        if couple != '':
                # Set couple if needed
                url = url + couple + '/'
                # Add auth data if needed
        if private == 1:
                self.__nonce()
                param.update({
                        'key' : self.__api_key,
                        'signature' : self.__signature(),
                        'nonce' : self.__nonce_v})
        # Post Request
        answer = self.__post(url, param);
        # Generate dict and return
        return json.loads(answer)

#------------Ticker----------------------#
def ticker(self, couple = 'GHS/BTC'):
        return self.api_call('ticker', {}, 0, couple)

#------------Order Book----------------------#
def order_book(self, couple = 'GHS/BTC'):
        return self.api_call('order_book', {}, 0, couple)

#------------Trade History----------------------#
def trade_history(self, since = 1, couple = 'GHS/BTC'):
        return self.api_call('trade_history',{"since" : str(since)}, 0, couple)

#------------Balance----------------------#
def balance(self):
        return self.api_call('balance', {}, 1)

#------------Current Orders----------------------#
def current_orders(self, couple = 'GHS/BTC'):
        return self.api_call('open_orders', {},1,couple)

#------------Cancel Order----------------------#
def cancel_order(self, order_id):
        return self.api_call('cancel_order', {"id" : order_id},1)

#------------Place Order----------------------#
def place_order(self, ptype = 'buy', amount = 1, price = 1, couple = 'GHS/BTC'):
        return  self.api_call('place_order', {"type" : ptype, "amount" : str(amount), "price" : str(price)},1,couple)

#------------Hashrate----------------------#
def hashrate(self):
        return self.api_call('ghash.io/hashrate', {}, 1, '', 0)
'''

'''
#------------Access----------------------#

api = cexapi.api(cexuser,cexkey,cexsecret)
print (api)

##############################################################################################################
'''
